name: ci-backend-workflow

on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        
  # Automatic trigger on push events to the main branch
  pull_request:
    branches:
      - main
    paths:
      - 'starter/backend/**'     

jobs:
  setup:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Cache pipenv
      uses: actions/cache@v4
      id: cache-pipenv
      with:
        path: ~/.local/share/virtualenvs
        key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pipenv-${{ hashFiles('${{ vars.BACKEND_APP_DIR }}/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pipenv
          
    - name: Install pipenv
      run: cd ${{ vars.BACKEND_APP_DIR }} && python -m pip install --upgrade pipenv wheel

    - name: Install Dependencies
      run: cd ${{ vars.BACKEND_APP_DIR }} && pipenv install --system --deploy --dev

  lint:
    runs-on: ubuntu-latest
    needs: [setup]
    environment: ${{ inputs.environment }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Cache pipenv
      uses: actions/cache@v4
      id: cache-pipenv
      with:
        path: ~/.local/share/virtualenvs
        key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pipenv-${{ hashFiles('${{ vars.BACKEND_APP_DIR }}/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pipenv
          
    - name: Install pipenv
      run: cd ${{ vars.BACKEND_APP_DIR }} && python -m pip install --upgrade pipenv wheel

    - name: Install Dependencies
      run: cd ${{ vars.BACKEND_APP_DIR }} && pipenv install --system --deploy --dev

    # Run lint
    - run: cd ${{ vars.BACKEND_APP_DIR }} && pipenv run lint .
    
  test:
    runs-on: ubuntu-latest
    needs: [setup]
    environment: ${{ inputs.environment }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Cache pipenv
      uses: actions/cache@v4
      id: cache-pipenv
      with:
        path: ~/.local/share/virtualenvs
        key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pipenv-${{ hashFiles('${{ vars.BACKEND_APP_DIR }}/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pipenv
          
    - name: Install pipenv
      run: cd ${{ vars.BACKEND_APP_DIR }} && python -m pip install --upgrade pipenv wheel

    - name: Install Dependencies
      run: cd ${{ vars.BACKEND_APP_DIR }} && pipenv install --system --deploy --dev    
    
    # Run tests
    - run: cd ${{ vars.BACKEND_APP_DIR }} && pipenv run test

  build:
    needs: [ lint, test ]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: AWS Configure
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Amazon ECR Login
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
        
    - name: Build Application
      run: |
        cd ${{ vars.BACKEND_APP_DIR }}
        docker build --build-arg REACT_APP_MOVIE_API_URL=${{ vars.REACT_APP_MOVIE_API_URL }} -t $BACKEND_CONTAINER_REGISTRY_URL:${{ github.sha }} .
        docker push $BACKEND_CONTAINER_REGISTRY_URL:${{ github.sha }}
  
  deploy:
    needs: [ lint, test, build ]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: AWS Configure
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Update kube-config
        run: aws eks update-kubeconfig --name cluster

      - name: Deploy Backend
        run: |
          cd backend/k8s
          kustomize edit set image backend=$BACKEND_CONTAINER_REGISTRY_URL:${{ github.sha }}
          kustomize build | kubectl apply -f -
