name: ci-frontend-workflow

on:
  # 1. Is triggered on pull_requests events against the main branch
  pull_request:
    branches:
      - master
    # a. Only when code in the frontend application changes  
    paths:
      - 'starter/frontend/**'  

  # 2. Can be run on-demand (i.e. manually without needing to push code)
  workflow_dispatch:    

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Use Node.js 18
      uses: actions/setup-node@v3
      with:
        node-version: 18
        
    - name: Cache node modules
      id: cache-npm
      uses: actions/cache@v3
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('starter/frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
          
    - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
      name: List the state of node modules
      continue-on-error: true
      run: npm --prefix starter/frontend list
    
    - name: Install dependencies
      run: npm --prefix starter/frontend install


Thanks for the additional detail! Since your frontend application is located in the starter/frontend directory of the repository, we need to modify the workflow to ensure that all steps (like checkout, install dependencies, linting, testing, and building) are performed within the correct subdirectory.

We can achieve this by changing the working directory to starter/frontend in each of the relevant steps.

Hereâ€™s the updated workflow with the correct directory structure:

Updated GitHub Actions Workflow:
yaml
Copy
Edit
name: Frontend CI Pipeline

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Setup Job (Common steps for lint, test, and build)
  setup:
    runs-on: ubuntu-latest
    outputs:
      node-modules: ${{ steps.cache.outputs.cache-hit }}  # Output the cache hit status
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3
        
      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Specify the Node.js version as per your project's requirement

      # Step 3: Cache node modules
      - name: Cache node modules
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/starter/frontend/node_modules  # Cache node_modules within the correct directory
          key: ${{ runner.os }}-node-modules-${{ hashFiles('starter/frontend/**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      # Step 4: Install dependencies
      - name: Install dependencies
        working-directory: starter/frontend  # Run npm install in the correct directory
        run: npm install

  # Lint Job
  lint:
    runs-on: ubuntu-latest
    needs: setup  # Runs after the setup job
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3
        
      # Step 2: Run lint
      - name: Run lint
        working-directory: starter/frontend  # Run lint in the correct directory
        run: npm run lint
